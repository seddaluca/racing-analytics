services:
  # Database con TimescaleDB per dati telemetrici
  postgres:
    image: timescale/timescaledb:latest-pg14
    container_name: racing_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-racing_analytics}
      POSTGRES_USER: ${POSTGRES_USER:-racing_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-racing_password}
      POSTGRES_MULTIPLE_EXTENSIONS: timescaledb
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - racing_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-racing_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis per cache e message broker
  redis:
    image: redis:7-alpine
    container_name: racing_redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - racing_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Servizio Telemetria - Ricezione dati dalla PlayStation
  telemetry-service:
    build:
      context: ./services/telemetry
      dockerfile: Dockerfile
    container_name: racing_telemetry
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-racing_user}:${POSTGRES_PASSWORD:-racing_password}@postgres:5432/${POSTGRES_DB:-racing_analytics}
      REDIS_URL: redis://redis:6379
      PLAYSTATION_IP: ${PLAYSTATION_IP:-192.168.1.100}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${TELEMETRY_PORT:-33740}:33740/udp"
      - "${TELEMETRY_HTTP_PORT:-8001}:8000"
    networks:
      - racing_network
    restart: unless-stopped

  # Servizio API - REST API per frontend
  api-service:
    build:
      context: ./services/api
      dockerfile: Dockerfile
    container_name: racing_api
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-racing_user}:${POSTGRES_PASSWORD:-racing_password}@postgres:5432/${POSTGRES_DB:-racing_analytics}
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      JWT_SECRET: ${JWT_SECRET:-your-jwt-secret-here}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${API_PORT:-8002}:8000"
    networks:
      - racing_network
    restart: unless-stopped

  # Servizio Data Processor - Elaborazione batch e analytics
  data-processor:
    build:
      context: ./services/processor
      dockerfile: Dockerfile
    container_name: racing_processor
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-racing_user}:${POSTGRES_PASSWORD:-racing_password}@postgres:5432/${POSTGRES_DB:-racing_analytics}
      REDIS_URL: redis://redis:6379
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - racing_network
    restart: unless-stopped

  # Frontend React
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: racing_frontend
    environment:
      REACT_APP_API_URL: http://localhost:${API_PORT:-8002}
      REACT_APP_WS_URL: ws://localhost:${TELEMETRY_HTTP_PORT:-8001}
    ports:
      - "${FRONTEND_PORT:-3000}:80"
    depends_on:
      - api-service
      - telemetry-service
    networks:
      - racing_network
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: racing_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "${NGINX_PORT:-80}:80"
    depends_on:
      - frontend
      - api-service
    networks:
      - racing_network
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  racing_network:
    driver: bridge